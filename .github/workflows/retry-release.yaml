---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Retry Release

on:
  workflow_dispatch:

jobs:
  upstream:
    name: Upstream Versions
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.upstream.outputs.apps }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Gather all current app versions
        id: upstream
        run: |
          apps=$(yq eval-all --indent 0 --output-format json '[.]' apps/*/metadata.yaml)
          echo "apps=${apps}" >> $GITHUB_OUTPUT

  current:
    if: ${{ needs.upstream.outputs.apps != '[]' }}
    name: Current Versions
    runs-on: ubuntu-latest
    needs: upstream
    outputs:
      app: ${{ steps.current.outputs.app }}
    strategy:
      matrix:
        apps: ${{ fromJSON(needs.upstream.outputs.apps) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup mise
        uses: jdx/mise-action@5083fe46898c414b2475087cc79da59e7da859e8 # v2.1.11
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          cache: false

      - name: Get current version
        id: current
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          version=$(\
              regctl image inspect ghcr.io/${{ github.repository_owner }}/${{ matrix.apps.name }}:rolling \
                  | jq --raw-output '.config.Labels["org.opencontainers.image.version"]' \
          )
          if [[ "${version}" != "${{ matrix.apps.version }}" ]]; then
              echo "app=$(gojo $(gojo name="${{ matrix.apps.name }}" version="${version}"))" >> $GITHUB_OUTPUT
          else
              echo "app=[]" >> $GITHUB_OUTPUT
          fi

  build:
    if: ${{ needs.current.outputs.app != '[]' }}
    needs: current
    name: Build ${{ matrix.app.name }}
    uses: ./.github/workflows/image-build-action.yaml
    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write
      security-events: write
    secrets: inherit
    strategy:
      matrix:
        app: ${{ fromJSON(needs.current.outputs.app) }}
      fail-fast: false
    with:
      app: ${{ matrix.app.name }}
      version: ${{ matrix.app.version }}
      release: false

  status:
    if: ${{ !cancelled() }}
    needs: build
    name: Build Success
    runs-on: ubuntu-latest
    steps:
      - name: Any jobs failed?
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

      - name: All jobs passed or skipped?
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: echo "All jobs passed or skipped" && echo "${{ toJSON(needs.*.result) }}"
